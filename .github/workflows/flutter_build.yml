name: Flutter Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      # ðŸ”§ Patch Gradle + Kotlin in existing android folder
      - name: Patch Gradle + Kotlin versions
        run: |
          echo "ðŸ”§ Patching Gradle + Kotlin in android folder..."
          
          # Gradle wrapper
          sed -i 's#distributionUrl=.*#distributionUrl=https://services.gradle.org/distributions/gradle-8.2-all.zip#' android/gradle/wrapper/gradle-wrapper.properties || true
          
          # Kotlin version (old style build.gradle)
          if grep -q "ext.kotlin_version" android/build.gradle; then
            sed -i 's/ext.kotlin_version = .*/ext.kotlin_version = "1.9.25"/' android/build.gradle
          fi

          # Kotlin plugin (new style settings.gradle)
          if grep -q "org.jetbrains.kotlin.android" android/settings.gradle; then
            sed -i 's/id "org.jetbrains.kotlin.android" version "[^"]*"/id "org.jetbrains.kotlin.android" version "1.9.25"/' android/settings.gradle
          fi

          # Android Gradle Plugin
          if grep -q "com.android.tools.build:gradle" android/build.gradle; then
            sed -i 's/classpath "com.android.tools.build:gradle:[^"]*"/classpath "com.android.tools.build:gradle:8.1.2"/' android/build.gradle
          fi

      - name: Add INTERNET permission + set app name
        run: |
          # Add INTERNET permission if missing
          sed -i '/<manifest/a\    <uses-permission android:name="android.permission.INTERNET" />' android/app/src/main/AndroidManifest.xml

          # Ensure app name is OneChat
          sed -i 's/android:label="[^"]*"/android:label="OneChat"/' android/app/src/main/AndroidManifest.xml

      - name: Get dependencies
        run: flutter pub get

      # ðŸ–¼ Safe launcher icon generation
      - name: Apply launcher icon safely
        run: |
          echo "ðŸ–¼ Preparing res folders for launcher icons..."
          
          # Ensure all mipmap directories exist
          for size in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            path="android/app/src/main/res/mipmap-$size"
            if [ -f "$path" ]; then
              echo "âš  Found file at $path, removing..."
              rm "$path"
            fi
            mkdir -p "$path"
          done

          # Generate launcher icons from image/logo.png
          flutter pub run flutter_launcher_icons:main

      - name: Build release APK
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
